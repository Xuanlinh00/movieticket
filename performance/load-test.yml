config:
  target: 'http://localhost:5000'
  phases:
    # Warm-up phase
    - duration: 60
      arrivalRate: 5
      name: "Warm-up"
    # Ramp-up phase
    - duration: 120
      arrivalRate: 10
      rampTo: 50
      name: "Ramp-up"
    # Sustained load phase
    - duration: 300
      arrivalRate: 50
      name: "Sustained load"
    # Peak load phase
    - duration: 120
      arrivalRate: 100
      name: "Peak load"
    # Cool-down phase
    - duration: 60
      arrivalRate: 10
      name: "Cool-down"
  
  # Performance thresholds
  ensure:
    - http.response_time.p95: 2000  # 95th percentile response time < 2s
    - http.response_time.p99: 5000  # 99th percentile response time < 5s
    - http.request_rate: 45         # At least 45 requests per second
    - http.codes.200: 95            # At least 95% success rate

  # Load testing plugins
  plugins:
    expect: {}
    metrics-by-endpoint: {}
    
  # Variables for dynamic data
  variables:
    movieIds: [1, 2, 3, 4, 5]
    cinemaIds: [1, 2, 3]
    userEmails: 
      - "user1@test.com"
      - "user2@test.com" 
      - "user3@test.com"
      - "user4@test.com"
      - "user5@test.com"

scenarios:
  # Scenario 1: Browse movies (most common user flow)
  - name: "Browse Movies"
    weight: 40
    flow:
      - get:
          url: "/api/movies"
          expect:
            - statusCode: 200
            - hasProperty: "length"
      - think: 2
      - get:
          url: "/api/movies/{{ $randomInt(1, 5) }}"
          expect:
            - statusCode: 200
            - hasProperty: "title"
      - think: 3
      - get:
          url: "/api/movies/{{ $randomInt(1, 5) }}/showtimes"
          expect:
            - statusCode: 200

  # Scenario 2: User authentication flow
  - name: "User Authentication"
    weight: 20
    flow:
      - post:
          url: "/api/auth/login"
          json:
            email: "{{ userEmails[$randomInt(0, 4)] }}"
            password: "password123"
          capture:
            - json: "$.token"
              as: "authToken"
          expect:
            - statusCode: 200
            - hasProperty: "token"
      - think: 1
      - get:
          url: "/api/tickets"
          headers:
            Authorization: "Bearer {{ authToken }}"
          expect:
            - statusCode: 200

  # Scenario 3: Cinema and showtime browsing
  - name: "Browse Cinemas"
    weight: 15
    flow:
      - get:
          url: "/api/cinemas"
          expect:
            - statusCode: 200
      - think: 2
      - get:
          url: "/api/cinemas/{{ $randomInt(1, 3) }}/rooms"
          expect:
            - statusCode: 200
      - think: 1
      - get:
          url: "/api/showtimes"
          expect:
            - statusCode: 200

  # Scenario 4: Ticket booking flow (authenticated users)
  - name: "Ticket Booking"
    weight: 15
    flow:
      # Login first
      - post:
          url: "/api/auth/login"
          json:
            email: "{{ userEmails[$randomInt(0, 4)] }}"
            password: "password123"
          capture:
            - json: "$.token"
              as: "authToken"
          expect:
            - statusCode: 200
      - think: 2
      # Browse movies
      - get:
          url: "/api/movies"
          expect:
            - statusCode: 200
      - think: 3
      # Get showtimes
      - get:
          url: "/api/movies/{{ $randomInt(1, 5) }}/showtimes"
          capture:
            - json: "$[0].id"
              as: "showtimeId"
          expect:
            - statusCode: 200
      - think: 5
      # Create booking (simulate user thinking time)
      - post:
          url: "/api/bookings"
          headers:
            Authorization: "Bearer {{ authToken }}"
          json:
            showtimeId: "{{ showtimeId }}"
            seats: ["A1", "A2"]
            totalPrice: 170000
            paymentMethod: "credit_card"
            customerInfo:
              name: "Test User"
              phone: "0123456789"
              email: "{{ userEmails[$randomInt(0, 4)] }}"
          expect:
            - statusCode: 201
            - hasProperty: "bookingCode"

  # Scenario 5: Admin operations (lower frequency)
  - name: "Admin Operations"
    weight: 5
    flow:
      # Admin login
      - post:
          url: "/api/auth/login"
          json:
            email: "admin@nacinema.com"
            password: "admin123"
          capture:
            - json: "$.token"
              as: "adminToken"
          expect:
            - statusCode: 200
      - think: 1
      # Get all users (admin only)
      - get:
          url: "/api/admin/users"
          headers:
            Authorization: "Bearer {{ adminToken }}"
          expect:
            - statusCode: 200
      - think: 2
      # Get all tickets (admin only)
      - get:
          url: "/api/admin/all-tickets"
          headers:
            Authorization: "Bearer {{ adminToken }}"
          expect:
            - statusCode: 200

  # Scenario 6: Review system
  - name: "Movie Reviews"
    weight: 5
    flow:
      # Login
      - post:
          url: "/api/auth/login"
          json:
            email: "{{ userEmails[$randomInt(0, 4)] }}"
            password: "password123"
          capture:
            - json: "$.token"
              as: "authToken"
          expect:
            - statusCode: 200
      - think: 2
      # Get movie reviews
      - get:
          url: "/api/movies/{{ $randomInt(1, 5) }}/reviews"
          expect:
            - statusCode: 200
      - think: 3
      # Create review
      - post:
          url: "/api/reviews"
          headers:
            Authorization: "Bearer {{ authToken }}"
          json:
            movieId: "{{ $randomInt(1, 5) }}"
            rating: "{{ $randomInt(1, 5) }}"
            content: "Great movie! Highly recommended."
            status: "active"
          expect:
            - statusCode: 201

# Custom functions for realistic data generation
before:
  flow:
    - log: "Starting load test for Movie Ticket Booking API"

after:
  flow:
    - log: "Load test completed"
